1) First video done 
    search What is CDN, Cross-origin and difference between defer and async

2) Ignite our app
    # npm init -y
    # npm i parcel -D/--save-dev
    # npm i react react-dom

    a)Check all difference, details like ^/~ in package.json/lock npm vs npx

    # npx parcel index.html 
    # npx parcel build index.html ---> will break execution so delete main from package.json and run again
    # npx parcel index.html --https ---> serves as https://localhost

    parcel what do 
        a) HMR b) File watcher algorithm(wriitten in c++)  c) minifying,bundling d)clean code e)superfast f) dev & production build g) image optimization h)caching while development i) compression j) old browser compatibilty k) port no. manage l) consistent hash algo m) 
        due to it ract is faster

    add .parcel-cache in gitignore 

    add browser list in package.json // ref https://browsersl.ist/

    read transitive dependancy

    Polufill bebel tree shaking
    npm i babel-plugin-transform-remove-console -D, add .bebelrc file to remove specific console
    create new build and check console exist or not
    create start and build command
    why keys to element

    React.createElement => object -> html -> DOM 

    JSX looks like html but not html 
    JSX html difference

    bebel understands JSX code code and gives normal code 
    JSX uses React.createElement behind
    please check 
    bebel tool on their official website  bebeljs.io

    different ways of create Component using return or ()
    React.createElement vs JSX 

    component can acces as <Component /> or {Component()}

    JSX sanitize code for cross site script xss attack 

    component composition  


    <React.fragement> or <> 
    virtual DOm reconsilation react fiber tree 
    never use index as key
    Use config driven api 
    React is fast due to 
        - Virtual DOM, reconsilation , tree structure update, fast DOm manupulation
        - React fiber
        - detect exact change in DOM and update that 
    Only state variable tracked by React

    State changes rerender component
        try key press state change ang inspect element

    Use microservices like UI, backend etc 

    first load and render component and then call api and update component then


    useEffect -> hook(function)
              -> call with dependancy - make various dependancy combination and check in console 
              -> uses callback function 
              -> named import it
              -> check with console

    console log in render execute first then useEffect console then

    https://www.swiggy.com/dapi/restaurants/list/v5?lat=16.7035291&lng=74.2432304&is-seo-homepage-enabled=true&page_type=DESKTOP_WEB_LISTING 

    use corse chrome

    use always Optional chaining e.g json?.data?.cards[2]?............

    Use shimmer UI on conditional rendering 
    use list in null initially(Early render) to avoid render null problem 

    make two state that is all and filtered list

    use login and logout button  on click toggle auth_token which will be boolean 

    JS expression vs statement
        Statement 
            let a = 0;
            console.log(a);
        Expression 
        {((a=10),console.log(a))} write it in JSX Curly Braces(search it on web)

     useEffect 
            if dependancy array don't used, it will call after each render 

    Never create component in other componenet else it will add/create every time when outer component created

    never write useState in if block else it will create inconsitency and react will not know that state is exists or not
    never write useState in for loop
    state need to create in function 
    developer always should know exact what component does and create all state in it(for state dont use if/for)

    you can use useEffect more than one  

    import image by src/assets/img/file_name

    there is shimmer package but don't use it 
    inport package if needed
    use formik 
    make habit of create Component from scratch don't use snippets

    npm i react-router-dom developed by remix

    Refer routing configuration

    Single Page Application (SPA)
        not make network call from one page to another page

    Tpes of routing 
        Client Side routing
            - all component in appln load it according requirement
        Server Side routing
            - all page comes from Server
        
    after routes check inspect render

    outlet is placeholder for route based component will goes in it

    api not get please add for detail page

    
    
    
    ComponentDidMount best place to make Api call

    Normal Parent on Child Class Component

    parent constructor
    parent render
    child constructer
    child render
    child componentDidMount
    Parent componentDidMount  


    Parent with 2 Child

    parent constructor
    parent render
    child constructer 1
    child render 1
    child constructer 2
    child render 2
    child componentDidMount 1
    child componentDidMount 2
    Parent componentDidMount 

    this order because 
        1) react rendering has 2 phase

            Ref.    https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/
            1) Render phase
            2) Comit phase  
                - react modify DOM
        render phase batch chlderns & render all childern

    if One parent and One child with API call

    parent constructor
    parent render
    child constructer 1
    child render 1
    child componentDidMount 1 1 after that async code hold child cdm and pcdm completes & parent DOM commit
    Parent componentDidMount 
    {login: 'bhushank-noit', id: 138746291, node_id: 'U_kgDOCEUZsw', avatar_url: 'https://avatars.githubusercontent.com/u/138746291?v=4', gravatar_id: '', …}
    child componentDidMount 2 1
    child render 1
    child componentDidUpdate 1

    check why CDM has async but useEffect doesnot have async
    
    CDM execute once after first render
    CDU execute after every next render of first

    CWM execute after component unmount means route change and component unload

    Never ever compare React Life cycle of clas component to  functional lifecycle component

    Use prevProps and prevState in CDU to check state has been changed

    SPA Problem 
        eg. setInterval will continue if route changed because page is not reloaded so use CWM in class and return in useEffect to cleanup code

    Hooks 
        - gives readablity, reusablity modularity
        - create hooks using with use keyword prefix, with new file for it
    
    when you are loading component on demand React suspends Rendering; firsttime suspends loading
    use suspends from react 

    Never ever Dynamically load any component inside another component else it is not good practice


    styling ways in react 
    1) index css 2) scss & sass 3) inline css 4) Material Ui and other framework 5) tailwind 
     pros and cons

    state vs Props
    props drilling

    Redux -> Data Mnagement for scalable large project 
          -> Single stor with different slices

    component can't directloy change store data, it uses dispatch action -> will call function -> this function(i.e. reducer) will modify store 

    if we click on button it dispach action which call reducer function which updates slice of store

    selector -> read data

    + -> dispatch actiob -> reducer -> updates store(slice) -> selector(it is hook, also known as subscribe to store) -> cart 

    npm i @reduxjs/toolkit // core of redux 
    npm i react-redux // bridge beetween react and redux 


    